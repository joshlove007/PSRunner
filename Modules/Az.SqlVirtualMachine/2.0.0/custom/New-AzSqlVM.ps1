
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates or updates a SQL virtual machine.
.Description
Creates or updates a SQL virtual machine.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachine
.Link
https://learn.microsoft.com/powershell/module/az.sqlvirtualmachine/new-azsqlvm
#>
function New-AzSqlVM {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachine])]
    [CmdletBinding(DefaultParameterSetName = 'CreateExpanded', PositionalBinding = $false, SupportsShouldProcess, ConfirmImpact = 'Medium')]
    param(
        [Parameter(Mandatory)]
        [Alias('SqlVirtualMachineName', 'SqlVMName')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Path')]
        [System.String]
        # Name of the SQL virtual machine.
        ${Name},

        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Path')]
        [System.String]
        # Name of the resource group that contains the resource.
        # You can obtain this value from the Azure Resource Manager API or the portal.
        ${ResourceGroupName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.DefaultInfo(Script = '(Get-AzContext).Subscription.Id')]
        [System.String]
        # Subscription ID that identifies an Azure subscription.
        ${SubscriptionId},

        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Resource location.
        ${Location},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable or disable R services (SQL 2016 onwards).
        ${AdditionalFeatureServerConfigurationIsRServicesEnabled},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable or disable SQL best practices Assessment feature on SQL virtual machine.
        ${AssessmentSettingEnable},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Run SQL best practices Assessment immediately on SQL virtual machine.
        ${AssessmentSettingRunImmediately},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.BackupScheduleType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.BackupScheduleType]
        # Backup schedule type.
        ${AutoBackupSettingBackupScheduleType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Include or exclude system databases from auto backup.
        ${AutoBackupSettingBackupSystemDb},

        [Parameter()]
        [AllowEmptyCollection()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AutoBackupDaysOfWeek])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AutoBackupDaysOfWeek[]]
        # Days of the week for the backups when FullBackupFrequency is set to Weekly.
        ${AutoBackupSettingDaysOfWeek},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable or disable autobackup on SQL virtual machine.
        ${AutoBackupSettingEnable},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable or disable encryption for backup on SQL virtual machine.
        ${AutoBackupSettingEnableEncryption},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.FullBackupFrequencyType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.FullBackupFrequencyType]
        # Frequency of full backups.
        # In both cases, full backups begin during the next scheduled time window.
        ${AutoBackupSettingFullBackupFrequency},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Start time of a given day during which full backups can take place.
        # 0-23 hours.
        ${AutoBackupSettingFullBackupStartTime},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Duration of the time window of a given day during which full backups can take place.
        # 1-23 hours.
        ${AutoBackupSettingFullBackupWindowHour},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Frequency of log backups.
        # 5-60 minutes.
        ${AutoBackupSettingLogBackupFrequency},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Security.SecureString]
        # Password for encryption on backup.
        ${AutoBackupSettingPassword},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Retention period of backup: 1-90 days.
        ${AutoBackupSettingRetentionPeriod},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Storage account key where backup will be taken to.
        ${AutoBackupSettingStorageAccessKey},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Storage account url where backup will be taken to.
        ${AutoBackupSettingStorageAccountUrl},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Storage container name where backup will be taken to.
        ${AutoBackupSettingStorageContainerName},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DayOfWeek])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DayOfWeek]
        # Day of week to apply the patch on.
        ${AutoPatchingSettingDayOfWeek},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable or disable autopatching on SQL virtual machine.
        ${AutoPatchingSettingEnable},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Duration of patching.
        ${AutoPatchingSettingMaintenanceWindowDuration},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Hour of the day when patching is initiated.
        # Local VM time.
        ${AutoPatchingSettingMaintenanceWindowStartingHour},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # The client Id of the Managed Identity to query Microsoft Graph API.
        # An empty string must be used for the system assigned Managed Identity
        ${AzureAdAuthenticationSettingClientId},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable automatic upgrade of Sql IaaS extension Agent.
        ${EnableAutomaticUpgrade},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.IdentityType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.IdentityType]
        # The identity type.
        # Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
        ${IdentityType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Azure Key Vault url.
        ${KeyVaultCredentialSettingAzureKeyVaultUrl},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Credential name.
        ${KeyVaultCredentialSettingCredentialName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable or disable key vault credential setting.
        ${KeyVaultCredentialSettingEnable},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Service principal name to access key vault.
        ${KeyVaultCredentialSettingServicePrincipalName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Service principal name secret to access key vault.
        ${KeyVaultCredentialSettingServicePrincipalSecret},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.LeastPrivilegeMode])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.LeastPrivilegeMode]
        # SQL IaaS Agent least privilege mode.
        ${LeastPrivilegeMode},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlServerLicenseType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlServerLicenseType]
        # SQL Server license type.
        ${LicenseType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # SQL image offer.
        # Examples include SQL2016-WS2016, SQL2017-WS2016.
        ${Offer},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AssessmentDayOfWeek])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AssessmentDayOfWeek]
        # Day of the week to run assessment.
        ${ScheduleDayOfWeek},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable or disable assessment schedule on SQL virtual machine.
        ${ScheduleEnable},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Occurrence of the DayOfWeek day within a month to schedule assessment.
        # Takes values: 1,2,3,4 and -1.
        # Use -1 for last DayOfWeek day of the month
        ${ScheduleMonthlyOccurrence},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Time of the day in HH:mm format.
        # Eg.
        # 17:30
        ${ScheduleStartTime},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Number of weeks to schedule between 2 assessment runs.
        # Takes value from 1-6
        ${ScheduleWeeklyInterval},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlImageSku])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlImageSku]
        # SQL Server edition type.
        ${Sku},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.ConnectivityType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.ConnectivityType]
        # SQL Server connectivity option.
        ${SqlConnectivityUpdateSettingConnectivityType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server port.
        ${SqlConnectivityUpdateSettingPort},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Security.SecureString]
        # SQL Server sysadmin login password.
        ${SqlConnectivityUpdateSettingSqlAuthUpdatePassword},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # SQL Server sysadmin login to create.
        ${SqlConnectivityUpdateSettingSqlAuthUpdateUserName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # SQL Server default file path
        ${SqlDataSettingDefaultFilePath},

        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32[]]
        # Logical Unit Numbers for the disks.
        ${SqlDataSettingLun},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # SQL Server Collation.
        ${SqlInstanceSettingCollation},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # SQL Server IFI.
        ${SqlInstanceSettingIsIfiEnabled},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # SQL Server LPIM.
        ${SqlInstanceSettingIsLpimEnabled},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # SQL Server Optimize for Adhoc workloads.
        ${SqlInstanceSettingIsOptimizeForAdHocWorkloadsEnabled},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server MAXDOP.
        ${SqlInstanceSettingMaxDop},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server maximum memory.
        ${SqlInstanceSettingMaxServerMemoryMb},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server minimum memory.
        ${SqlInstanceSettingMinServerMemoryMb},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # SQL Server default file path
        ${SqlLogSettingDefaultFilePath},

        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32[]]
        # Logical Unit Numbers for the disks.
        ${SqlLogSettingLun},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlManagementMode])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlManagementMode]
        # SQL Server Management type.
        ${SqlManagementType},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType]
        # Disk configuration to apply to SQL Server.
        ${SqlStorageUpdateSettingDiskConfigurationType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Virtual machine disk count.
        ${SqlStorageUpdateSettingDiskCount},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Device id of the first disk to be updated.
        ${SqlStorageUpdateSettingStartingDeviceId},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server tempdb data file count
        ${SqlTempDbSettingDataFileCount},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server tempdb data file size
        ${SqlTempDbSettingDataFileSize},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server tempdb data file autoGrowth size
        ${SqlTempDbSettingDataGrowth},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # SQL Server default file path
        ${SqlTempDbSettingDefaultFilePath},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server tempdb log file size
        ${SqlTempDbSettingLogFileSize},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server tempdb log file autoGrowth size
        ${SqlTempDbSettingLogGrowth},

        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32[]]
        # Logical Unit Numbers for the disks.
        ${SqlTempDbSettingLun},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # SQL Server tempdb persist folder choice
        ${SqlTempDbSettingPersistFolder},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # SQL Server tempdb persist folder location
        ${SqlTempDbSettingPersistFolderPath},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.
        ${SqlVirtualMachineGroupResourceId},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlWorkloadType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlWorkloadType]
        # SQL Server workload type.
        ${SqlWorkloadTypeUpdateSettingSqlWorkloadType},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType]
        # Disk configuration to apply to SQL Server.
        ${StorageConfigurationSettingDiskConfigurationType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # SQL Server SystemDb Storage on DataPool if true.
        ${StorageConfigurationSettingSqlSystemDbOnDataDisk},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType]
        # Storage workload type.
        ${StorageConfigurationSettingStorageWorkloadType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(PossibleTypes = ([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITrackedResourceTags]))]
        [System.Collections.Hashtable]
        # Resource tags.
        ${Tag},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # ARM Resource id of underlying virtual machine created from SQL marketplace image.
        ${VirtualMachineResourceId},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Security.SecureString]
        # Cluster bootstrap account password.
        ${WsfcDomainCredentialsClusterBootstrapAccountPassword},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Security.SecureString]
        # Cluster operator account password.
        ${WsfcDomainCredentialsClusterOperatorAccountPassword},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Security.SecureString]
        # SQL service account password.
        ${WsfcDomainCredentialsSqlServiceAccountPassword},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        ${WsfcStaticIP},

        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The credentials, account, tenant, and subscription used for communication with Azure.
        ${DefaultProfile},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command as a job
        ${AsJob},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command asynchronously
        ${NoWait},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )

    process {
        if ($PSBoundParameters.ContainsKey("ResourceGroupName") -and $PSBoundParameters.ContainsKey("Name")) {
            $ResourceGroupName = $PSBoundParameters["ResourceGroupName"]
            $Name = $PSBoundParameters["Name"]
            $SubscriptionId = (Get-AzContext).Subscription.Id
            $VirtualMachineResourceId = "/subscriptions/${SubscriptionId}/resourceGroups/${ResourceGroupName}/providers/Microsoft.Compute/virtualMachines/${Name}"
            $PSBoundParameters.Add("VirtualMachineResourceId", $VirtualMachineResourceId)
        }
        Az.SqlVirtualMachine.internal\New-AzSqlVM @PSBoundParameters
    }

}

# SIG # Begin signature block
# MIInkwYJKoZIhvcNAQcCoIInhDCCJ4ACAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCB5BMMC/wnQ4WFX
# Sq+5B6V1oqoOUKqiw35w+h81PO8GWaCCDXYwggX0MIID3KADAgECAhMzAAADTrU8
# esGEb+srAAAAAANOMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMjMwMzE2MTg0MzI5WhcNMjQwMzE0MTg0MzI5WjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQDdCKiNI6IBFWuvJUmf6WdOJqZmIwYs5G7AJD5UbcL6tsC+EBPDbr36pFGo1bsU
# p53nRyFYnncoMg8FK0d8jLlw0lgexDDr7gicf2zOBFWqfv/nSLwzJFNP5W03DF/1
# 1oZ12rSFqGlm+O46cRjTDFBpMRCZZGddZlRBjivby0eI1VgTD1TvAdfBYQe82fhm
# WQkYR/lWmAK+vW/1+bO7jHaxXTNCxLIBW07F8PBjUcwFxxyfbe2mHB4h1L4U0Ofa
# +HX/aREQ7SqYZz59sXM2ySOfvYyIjnqSO80NGBaz5DvzIG88J0+BNhOu2jl6Dfcq
# jYQs1H/PMSQIK6E7lXDXSpXzAgMBAAGjggFzMIIBbzAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUnMc7Zn/ukKBsBiWkwdNfsN5pdwAw
# RQYDVR0RBD4wPKQ6MDgxHjAcBgNVBAsTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEW
# MBQGA1UEBRMNMjMwMDEyKzUwMDUxNjAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzci
# tW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5j
# b20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEG
# CCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3dy5taWNyb3NvZnQu
# Y29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0
# MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAD21v9pHoLdBSNlFAjmk
# mx4XxOZAPsVxxXbDyQv1+kGDe9XpgBnT1lXnx7JDpFMKBwAyIwdInmvhK9pGBa31
# TyeL3p7R2s0L8SABPPRJHAEk4NHpBXxHjm4TKjezAbSqqbgsy10Y7KApy+9UrKa2
# kGmsuASsk95PVm5vem7OmTs42vm0BJUU+JPQLg8Y/sdj3TtSfLYYZAaJwTAIgi7d
# hzn5hatLo7Dhz+4T+MrFd+6LUa2U3zr97QwzDthx+RP9/RZnur4inzSQsG5DCVIM
# pA1l2NWEA3KAca0tI2l6hQNYsaKL1kefdfHCrPxEry8onJjyGGv9YKoLv6AOO7Oh
# JEmbQlz/xksYG2N/JSOJ+QqYpGTEuYFYVWain7He6jgb41JbpOGKDdE/b+V2q/gX
# UgFe2gdwTpCDsvh8SMRoq1/BNXcr7iTAU38Vgr83iVtPYmFhZOVM0ULp/kKTVoir
# IpP2KCxT4OekOctt8grYnhJ16QMjmMv5o53hjNFXOxigkQWYzUO+6w50g0FAeFa8
# 5ugCCB6lXEk21FFB1FdIHpjSQf+LP/W2OV/HfhC3uTPgKbRtXo83TZYEudooyZ/A
# Vu08sibZ3MkGOJORLERNwKm2G7oqdOv4Qj8Z0JrGgMzj46NFKAxkLSpE5oHQYP1H
# tPx1lPfD7iNSbJsP6LiUHXH1MIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkq
# hkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
# bjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
# IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQG
# EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
# A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQg
# Q29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC
# CgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03
# a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akr
# rnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0Rrrg
# OGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy
# 4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9
# sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAh
# dCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8k
# A/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTB
# w3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmn
# Eyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90
# lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0w
# ggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2o
# ynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYD
# VR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBa
# BgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2Ny
# bC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsG
# AQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
# L3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNV
# HSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3
# dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsG
# AQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABl
# AG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKb
# C5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11l
# hJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6
# I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0
# wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560
# STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQam
# ASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGa
# J+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ah
# XJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA
# 9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33Vt
# Y5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr
# /Xmfwb1tbWrJUnMTDXpQzTGCGXMwghlvAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
# EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
# aWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNp
# Z25pbmcgUENBIDIwMTECEzMAAANOtTx6wYRv6ysAAAAAA04wDQYJYIZIAWUDBAIB
# BQCgga4wGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEO
# MAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIKUYbjJUFb6kpR9DAKR60i5Z
# 3hLMtwG7qeOrHF1jCTWzMEIGCisGAQQBgjcCAQwxNDAyoBSAEgBNAGkAYwByAG8A
# cwBvAGYAdKEagBhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20wDQYJKoZIhvcNAQEB
# BQAEggEAOA9WIp1f1fhhNzZ7HnZjS+ke+WvWQ7ojqC8y4x8WeOgMXrS/qsp9mgCp
# TyiOSSwIyNbJxE8HN0ePFJuwjYsUX9YLbldcOiea7qzJSQKUu6mlbH6A0Xpku2uP
# xvAwNN41BFzXlO4pfWPDko/8EDiOizUWri0DaTmVD4q5OtFwa5V0q1nW0C2TAmNH
# ZHikvVkgfv9jppq4Kdu6jcNW2IEoHHZtFz87P0Shjk4tpj9tx15OwOIbCKcKfhCP
# ruGolW1vBNaTlsILKCPFkvlI2DF17eIEXal9aYG5J96c4TBCGqrvF0BFnFltavyp
# JvAjsqUmF2vs75U842eRU2TeVxx5OaGCFv0wghb5BgorBgEEAYI3AwMBMYIW6TCC
# FuUGCSqGSIb3DQEHAqCCFtYwghbSAgEDMQ8wDQYJYIZIAWUDBAIBBQAwggFRBgsq
# hkiG9w0BCRABBKCCAUAEggE8MIIBOAIBAQYKKwYBBAGEWQoDATAxMA0GCWCGSAFl
# AwQCAQUABCB0e/9GUt7XokH8fe924FHoLhDjXoplf4tkUT5YL1Rf5wIGZF0U46kV
# GBMyMDIzMDUyMjExNDU0MC45MjdaMASAAgH0oIHQpIHNMIHKMQswCQYDVQQGEwJV
# UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
# ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1l
# cmljYSBPcGVyYXRpb25zMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpFNUE2LUUy
# N0MtNTkyRTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaCC
# EVQwggcMMIIE9KADAgECAhMzAAABvvQgou6W1iDWAAEAAAG+MA0GCSqGSIb3DQEB
# CwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
# EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNV
# BAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTIyMTEwNDE5MDEy
# MloXDTI0MDIwMjE5MDEyMlowgcoxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
# aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
# cG9yYXRpb24xJTAjBgNVBAsTHE1pY3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlvbnMx
# JjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkU1QTYtRTI3Qy01OTJFMSUwIwYDVQQD
# ExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIICIjANBgkqhkiG9w0BAQEF
# AAOCAg8AMIICCgKCAgEApV/y2z7Da7nMu0tykLY8olh7Z03EqFNz3iFlMp9gOfVm
# ZABmheCc87RuPdQ2P+OHUJiqCQAWNuNSoI/Q1ixEw9AA657ldD8Z3/EktpmxKHHa
# vOhwQSFPcpTGFVXIxKCwoO824giyHPG84dfhdi6WU7f7D+85LaPB0dOsPHKKMGlC
# 9p66Lv9yQzvAhZGFmFhlusCy/egrz6JX/OHOT9qCwughrL0IPf47ULe1pQSEEihy
# 438JwS+rZU4AVyvQczlMC26XsTuDPgEQKlzx9ru7EvNV99l/KCU9bbFf5SnkN1mo
# UgKUq09NWlKxzLGEvhke2QNMopn86Jh1fl/PVevN/xrZSpV23rM4lB7lh7XSsCPe
# FslTYojKN2ioOC6p3By7kEmvZCh6rAsPKsARJISdzKQCMq+mqDuiP6mr/LvuWKin
# P+2ZGmK/C1/skvlTjtIehu50yoXNDlh1CN9B3QLglQY+UCBEqJog/BxAn3pWdR01
# o/66XIacgXI/d0wG2/x0OtbjEGAkacfQlmw0bDc02dhQFki/1Q9Vbwh4kC7VgAiJ
# A8bC5zEIYWHNU7C+He69B4/2dZpRjgd5pEpHbF9OYiAf7s5MnYEnHN/5o/bGO0aj
# Ab7VI4f9av62sC6xvhKTB5R4lhxEMWF0z4v7BQ5CHyMNkL+oTnzJLqnLVdXnuM0C
# AwEAAaOCATYwggEyMB0GA1UdDgQWBBTrKiAWoYRBoPGtbwvbhhX6a2+iqjAfBgNV
# HSMEGDAWgBSfpxVdAF5iXYP05dJlpxtTNRnpcjBfBgNVHR8EWDBWMFSgUqBQhk5o
# dHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWNyb3NvZnQlMjBU
# aW1lLVN0YW1wJTIwUENBJTIwMjAxMCgxKS5jcmwwbAYIKwYBBQUHAQEEYDBeMFwG
# CCsGAQUFBzAChlBodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NlcnRz
# L01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNydDAMBgNV
# HRMBAf8EAjAAMBMGA1UdJQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEBCwUAA4IC
# AQDHlfu9c0ImhdBis1yj56bBvOSyGpC/rSSty+1F49Tf6fmFEeqxhwTTHVHOeIRN
# d8gcDLSz0d79mXCqq8ynq6gJgy2u4LyyAr2LmwzFVuuxoGVR8YuUnRtvsDH5J+un
# ye/nMkwHiC+G82h3uQ8fcGj+2H0nKPmUpUtfQruMUXvzLjV5NyRjDiCL5c/f5ecm
# z01dnpnCvE6kIz/FTpkvOeVJk22I2akFZhPz24D6OT6KkTtwBRpSEHDYqCQ4cZ+7
# SXx7jzzd7b+0p9vDboqCy7SwWgKpGQG+wVbKrTm4hKkZDzcdAEgYqehXz78G00mY
# ILiDTyUikwQpoZ7am9pA6BdTPY+o1v6CRzcneIOnJYanHWz0R+KER/ZRFtLCyBMv
# LzSHEn0sR0+0kLklncKjGdA1YA42zOb611UeIGytZ9VhNwn4ws5GJ6n6PJmMPO+y
# PEkOy2f8OBiuhaqlipiWhzGtt5UsC0geG0sW9qwa4QAW1sQWIrhSl24MOOVwNl/A
# m9/ZqvLRWr1x4nupeR8G7+DNyn4MTg28yFZRU1ktSvyBMUSvN2K99BO6p1gSx/wv
# SsR45dG33PDG5fKqHOgDxctjBU5bX49eJqjNL7S/UndLF7S0OWL9mdk/jPVHP2I6
# XtN0K4VjdRwvIgr3jNib3GZyGJnORp/ZMbY2Dv1mKcx7dTCCB3EwggVZoAMCAQIC
# EzMAAAAVxedrngKbSZkAAAAAABUwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYT
# AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
# VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBS
# b290IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDEwMB4XDTIxMDkzMDE4MjIyNVoX
# DTMwMDkzMDE4MzIyNVowfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
# b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
# dGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwggIi
# MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDk4aZM57RyIQt5osvXJHm9DtWC
# 0/3unAcH0qlsTnXIyjVX9gF/bErg4r25PhdgM/9cT8dm95VTcVrifkpa/rg2Z4VG
# Iwy1jRPPdzLAEBjoYH1qUoNEt6aORmsHFPPFdvWGUNzBRMhxXFExN6AKOG6N7dcP
# 2CZTfDlhAnrEqv1yaa8dq6z2Nr41JmTamDu6GnszrYBbfowQHJ1S/rboYiXcag/P
# XfT+jlPP1uyFVk3v3byNpOORj7I5LFGc6XBpDco2LXCOMcg1KL3jtIckw+DJj361
# VI/c+gVVmG1oO5pGve2krnopN6zL64NF50ZuyjLVwIYwXE8s4mKyzbnijYjklqwB
# Sru+cakXW2dg3viSkR4dPf0gz3N9QZpGdc3EXzTdEonW/aUgfX782Z5F37ZyL9t9
# X4C626p+Nuw2TPYrbqgSUei/BQOj0XOmTTd0lBw0gg/wEPK3Rxjtp+iZfD9M269e
# wvPV2HM9Q07BMzlMjgK8QmguEOqEUUbi0b1qGFphAXPKZ6Je1yh2AuIzGHLXpyDw
# wvoSCtdjbwzJNmSLW6CmgyFdXzB0kZSU2LlQ+QuJYfM2BjUYhEfb3BvR/bLUHMVr
# 9lxSUV0S2yW6r1AFemzFER1y7435UsSFF5PAPBXbGjfHCBUYP3irRbb1Hode2o+e
# FnJpxq57t7c+auIurQIDAQABo4IB3TCCAdkwEgYJKwYBBAGCNxUBBAUCAwEAATAj
# BgkrBgEEAYI3FQIEFgQUKqdS/mTEmr6CkTxGNSnPEP8vBO4wHQYDVR0OBBYEFJ+n
# FV0AXmJdg/Tl0mWnG1M1GelyMFwGA1UdIARVMFMwUQYMKwYBBAGCN0yDfQEBMEEw
# PwYIKwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvRG9j
# cy9SZXBvc2l0b3J5Lmh0bTATBgNVHSUEDDAKBggrBgEFBQcDCDAZBgkrBgEEAYI3
# FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAf
# BgNVHSMEGDAWgBTV9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEugSaBH
# hkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNS
# b29DZXJBdXRfMjAxMC0wNi0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUF
# BzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0Nl
# ckF1dF8yMDEwLTA2LTIzLmNydDANBgkqhkiG9w0BAQsFAAOCAgEAnVV9/Cqt4Swf
# ZwExJFvhnnJL/Klv6lwUtj5OR2R4sQaTlz0xM7U518JxNj/aZGx80HU5bbsPMeTC
# j/ts0aGUGCLu6WZnOlNN3Zi6th542DYunKmCVgADsAW+iehp4LoJ7nvfam++Kctu
# 2D9IdQHZGN5tggz1bSNU5HhTdSRXud2f8449xvNo32X2pFaq95W2KFUn0CS9QKC/
# GbYSEhFdPSfgQJY4rPf5KYnDvBewVIVCs/wMnosZiefwC2qBwoEZQhlSdYo2wh3D
# YXMuLGt7bj8sCXgU6ZGyqVvfSaN0DLzskYDSPeZKPmY7T7uG+jIa2Zb0j/aRAfbO
# xnT99kxybxCrdTDFNLB62FD+CljdQDzHVG2dY3RILLFORy3BFARxv2T5JL5zbcqO
# Cb2zAVdJVGTZc9d/HltEAY5aGZFrDZ+kKNxnGSgkujhLmm77IVRrakURR6nxt67I
# 6IleT53S0Ex2tVdUCbFpAUR+fKFhbHP+CrvsQWY9af3LwUFJfn6Tvsv4O+S3Fb+0
# zj6lMVGEvL8CwYKiexcdFYmNcP7ntdAoGokLjzbaukz5m/8K6TT4JDVnK+ANuOaM
# mdbhIurwJ0I9JZTmdHRbatGePu1+oDEzfbzL6Xu/OHBE0ZDxyKs6ijoIYn/ZcGNT
# TY3ugm2lBRDBcQZqELQdVTNYs6FwZvKhggLLMIICNAIBATCB+KGB0KSBzTCByjEL
# MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
# bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjElMCMGA1UECxMcTWlj
# cm9zb2Z0IEFtZXJpY2EgT3BlcmF0aW9uczEmMCQGA1UECxMdVGhhbGVzIFRTUyBF
# U046RTVBNi1FMjdDLTU5MkUxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1w
# IFNlcnZpY2WiIwoBATAHBgUrDgMCGgMVAGitWlL3vPu8ENOAe+i2+4wfTMB7oIGD
# MIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV
# BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQG
# A1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwDQYJKoZIhvcNAQEF
# BQACBQDoFWrpMCIYDzIwMjMwNTIyMTIxNTM3WhgPMjAyMzA1MjMxMjE1MzdaMHQw
# OgYKKwYBBAGEWQoEATEsMCowCgIFAOgVaukCAQAwBwIBAAICHLcwBwIBAAICEbsw
# CgIFAOgWvGkCAQAwNgYKKwYBBAGEWQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgC
# AQACAwehIKEKMAgCAQACAwGGoDANBgkqhkiG9w0BAQUFAAOBgQCFh8gZdbHaZpuL
# BpXlDvE4gwRWC2WEm5Z8uPvANY7ZQ+gHoXz5NjT+F0qFdqstEc4xdGwb6cBxsklb
# eTaWyavKebHmR3+UIusFge0gCvHJ9cG8qlmTUCZJ/5YZOz2TOv/+DypYcpJGdByS
# I9o31azcMEWDa2VK45nUrg2QzL5+eTGCBA0wggQJAgEBMIGTMHwxCzAJBgNVBAYT
# AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
# VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
# aW1lLVN0YW1wIFBDQSAyMDEwAhMzAAABvvQgou6W1iDWAAEAAAG+MA0GCWCGSAFl
# AwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcNAQkQAQQwLwYJKoZIhvcN
# AQkEMSIEIMgKPmjuVdEwdRkp8HVtPJT6GTi1kfA9vfTIVdYtdRWsMIH6BgsqhkiG
# 9w0BCRACLzGB6jCB5zCB5DCBvQQglO6Kr632/Oy9ZbXPrhEPidNAg/Fef7K3SZg+
# DxjhDC8wgZgwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
# bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0
# aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAA
# Ab70IKLultYg1gABAAABvjAiBCCFGuQGL0+GmqWGf75kBfaxyaRl/UIWV2OwOqGH
# ct+3czANBgkqhkiG9w0BAQsFAASCAgAzMtJansKsI+A/d30Naswq3NjG70/slIKW
# tWzM9b3f0vdTCYtcYEK5R3FbO1Kz0XHNk2oM+GX6c1gm2PRXGyXgG1qlZ77AoXVb
# JL8iw21o/9j7pkb77s/BLIz/3nNkHi/wDuGvO7gOG/73h9trnBV1N2i0RK8UhDSF
# myxwl4b9XKPs3eSTa7RmSOu2gkJ5fPqZgWd1RzbpQbN+iLzXfXuri5maejuJSE07
# PjFyBSSBnM3zlE/OeJzTZ8Lm4w3O71LemD1EhZQ+wprKRDNQpzHcxma+u9H6E2ec
# cC8JzjvaRdcB37wrKe9ciowKdBieqKg+GWNmahJg9kkXBVPJn7l28HZHa2qJmHj5
# nHI/7oVKH/Mb1BSWUsC0InPgAB9XevZQ7rdhEMvNBSPPThvvvg4aHsh/lFcGebfF
# Gt8ysidWT+Z4cpm6Kr789lWZAy9/jVpeKF0WVSNhh2OfizXf9cBQY+usAR2byqzC
# 14KmmV9WB+fokdbbnnajcK0l/wi+/1VoF+dNCdDTaiJUPfDe6XcdKW2oFWcEDppj
# D2Kj6jQJmiCB4YLACjrzFHHXqvvh7jvhsaQLtrNKPz5KlRBDxiavpFtZaiEZeiad
# APU0wCyfz6HQjBJWlSYAWDxfBxDHSxmwyYhPZwPHCfY/l7DD6No7GhaWRJuNgUxj
# wlKJdWzJ3Q==
# SIG # End signature block
